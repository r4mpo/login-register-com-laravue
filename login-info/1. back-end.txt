1. Rodar via cmd:
> composer create-project laravel/laravel example-app "8.*" // cria o projeto laravel

---------------------------------------------

2. Rodar via cmd (apontando para o projeto)

// instalando pacote de autenticação

> composer require tymon/jwt-auth --ignore-platform-reqs
> php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"

--- [ I N F O ] ---

Após esses comandos, deve existir um arquivo config > jwt.php.
Esse arquivo contém as configurações do nosso token. Podemos estudar tais
configurações para alterá-las (como por ex, o tempo de vida de um token). No momento,
esse não é o objetivo. Além disso, não se esqueça de informar a base de dados no .env.

--------------------

3. Rodar via cmd (apontando para o projeto)
> php artisan jwt:secret // gerando token secreto

--------------------

4. app > Models > User.php

> A linha que inicia a classe deve ser: "class User extends Authenticatable implements JWTSubject"
> Não esquecer de importar o pacote: "use Tymon\JWTAuth\Contracts\JWTSubject;"


> Incluir estes 2 métodos ao final da classe:

    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    public function getJWTCustomClaims()
    {
        return [];
    }

--------------------------

5. config > auth.php

> Alteramos a linha 17. No array 'defaults' haverá o índice 'guard', ele deve ter o valor 'api':
    
	'defaults' => [
        	'guard' => 'api',
        	'passwords' => 'users',
    	],

> Dentro do array guards (linha 38) adicionamos o array associativo:
        
	'api' => [
            'driver'    => 'jwt',
            'provider'  => 'users',
            'hash'      => false,
        ],

-------------------------------

6. Rodar via cmd (apontando para o projeto)
> php artisan make:controller auth/AuthController
> php artisan make:request AuthRequest
> php artisan migrate

--------------------------------

7. app > Http > Requests > AuthRequest.php

> A função authorize() deve retornar true -> linhas 14 à 17;
> O return (linha 26) deve retornar a validação dos campos de email e senha. Observe:

        return [
            'email' => 'email|required',
            'password' => 'string|required',            
        ];

--------------------------------

8. app > Http > Controllers > auth > AuthController.php

> Deve haver a função de login. Sinta-se à vontade para copiar e colar (e modificar conforme a necessidade):

    public function login(AuthRequest $authRequest)
    {
        $inputs = $authRequest->validated();
        
        $credentials = [
            'email'     => $inputs['email'],
            'password'  => $inputs['password'],
        ];

        if (! $token = auth()->attempt($credentials)) {
            return response()->json(['error' => 'Houve um erro inesperado.'], 401);
        }

        return response()->json([
            'access_token' => $token,
            'token_type' => 'bearer',
            'expires_in' => auth()->factory()->getTTL() * 60
        ]);
    }

--------------------------------

9. api.php

> Como já estamos acostumados devido a projetos com Laravel, é
necessário criar as rotas e apontá-las para as funções do controller. Não
se esqueça de importar os controllers. Sugiro agrupar por controller, algo como:

Route::controller(AuthController::class)->group(function () {
    Route::post('/login', 'login');
});

---------------------------------